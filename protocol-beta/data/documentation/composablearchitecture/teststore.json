{"seeAlsoSections":[{"title":"Testing","identifiers":["doc:\/\/co.pointfree.ComposableArchitecture\/documentation\/ComposableArchitecture\/ActorIsolated"],"generated":true}],"schemaVersion":{"major":0,"minor":3,"patch":0},"sections":[],"primaryContentSections":[{"kind":"declarations","declarations":[{"tokens":[{"kind":"keyword","text":"final"},{"kind":"text","text":" "},{"kind":"keyword","text":"class"},{"kind":"text","text":" "},{"kind":"identifier","text":"TestStore"},{"kind":"text","text":"<"},{"kind":"genericParameter","text":"Reducer"},{"kind":"text","text":", "},{"kind":"genericParameter","text":"ScopedState"},{"kind":"text","text":", "},{"kind":"genericParameter","text":"ScopedAction"},{"kind":"text","text":", "},{"kind":"genericParameter","text":"Context"},{"kind":"text","text":"> "},{"kind":"keyword","text":"where"},{"kind":"text","text":" "},{"kind":"typeIdentifier","text":"Reducer"},{"kind":"text","text":" : "},{"kind":"typeIdentifier","identifier":"doc:\/\/co.pointfree.ComposableArchitecture\/documentation\/ComposableArchitecture\/ReducerProtocol","preciseIdentifier":"s:22ComposableArchitecture15ReducerProtocolP","text":"ReducerProtocol"}],"languages":["swift"],"platforms":["macOS"]}]},{"kind":"content","content":[{"anchor":"overview","level":2,"type":"heading","text":"Overview"},{"type":"paragraph","inlineContent":[{"type":"text","text":"This object aids in writing expressive and exhaustive tests for features built in the"},{"type":"text","text":" "},{"type":"text","text":"Composable Architecture. It allows you to send a sequence of actions to the store, and each"},{"type":"text","text":" "},{"type":"text","text":"step of the way you must assert exactly how state changed, and how effect emissions were fed"},{"type":"text","text":" "},{"type":"text","text":"back into the system."}]},{"type":"paragraph","inlineContent":[{"type":"text","text":"There are multiple ways the test store forces you to exhaustively assert on how your feature"},{"type":"text","text":" "},{"type":"text","text":"behaves:"}]},{"type":"unorderedList","items":[{"content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"After each action is sent you must describe precisely how the state changed from before"},{"type":"text","text":" "},{"type":"text","text":"the action was sent to after it was sent."}]},{"type":"paragraph","inlineContent":[{"type":"text","text":"If even the smallest piece of data differs the test will fail. This guarantees that you"},{"type":"text","text":" "},{"type":"text","text":"are proving you know precisely how the state of the system changes."}]}]},{"content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"Sending an action can sometimes cause an effect to be executed, and if that effect emits"},{"type":"text","text":" "},{"type":"text","text":"an action that is fed back into the system, you "},{"type":"strong","inlineContent":[{"type":"text","text":"must"}]},{"type":"text","text":" explicitly assert that you expect"},{"type":"text","text":" "},{"type":"text","text":"to receive that action from the effect, "},{"type":"emphasis","inlineContent":[{"type":"text","text":"and"}]},{"type":"text","text":" you must assert how state changed as a"},{"type":"text","text":" "},{"type":"text","text":"result."}]},{"type":"paragraph","inlineContent":[{"type":"text","text":"If you try to send another action before you have handled all effect emissions the"},{"type":"text","text":" "},{"type":"text","text":"assertion will fail. This guarantees that you do not accidentally forget about an effect"},{"type":"text","text":" "},{"type":"text","text":"emission, and that the sequence of steps you are describing will mimic how the application"},{"type":"text","text":" "},{"type":"text","text":"behaves in reality."}]}]},{"content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"All effects must complete by the time the assertion has finished running the steps you"},{"type":"text","text":" "},{"type":"text","text":"specify."}]},{"type":"paragraph","inlineContent":[{"type":"text","text":"If at the end of the assertion there is still an in-flight effect running, the assertion"},{"type":"text","text":" "},{"type":"text","text":"will fail. This helps exhaustively prove that you know what effects are in flight and"},{"type":"text","text":" "},{"type":"text","text":"forces you to prove that effects will not cause any future changes to your state."}]}]}]},{"type":"paragraph","inlineContent":[{"type":"text","text":"For example, given a simple counter reducer:"}]},{"type":"codeListing","syntax":"swift","code":["struct Counter: ReducerProtocol {","  struct State: Equatable {","    var count = 0","  }","","  enum Action {","    case decrementButtonTapped","    case incrementButtonTapped","  }","","  func reduce(","    into state: inout State, action: Action","  ) -> Effect<Action, Never> {","    switch action {","    case .decrementButtonTapped:","      state.count -= 1","      return .none","","    case .incrementButtonTapped:","      state.count += 1","      return .none","    }","  }","}"]},{"type":"paragraph","inlineContent":[{"type":"text","text":"One can assert against its behavior over time:"}]},{"type":"codeListing","syntax":"swift","code":["@MainActor","class CounterTests: XCTestCase {","  func testCounter() async {","    let store = TestStore(","      \/\/ Given a counter state of 0","      initialState: Counter.State(count: 0),","      reducer: Counter()","    )","","    \/\/ When the increment button is tapped","    await store.send(.incrementButtonTapped) {","      \/\/ Then the count should be 1","      $0.count = 1","    }","  }","}"]},{"type":"paragraph","inlineContent":[{"type":"text","text":"Note that in the trailing closure of "},{"type":"codeVoice","code":".send(.incrementButtonTapped)"},{"type":"text","text":" we are given a single"},{"type":"text","text":" "},{"type":"text","text":"mutable value of the state before the action was sent, and it is our job to mutate the value"},{"type":"text","text":" "},{"type":"text","text":"to match the state after the action was sent. In this case the "},{"type":"codeVoice","code":"count"},{"type":"text","text":" field changes to "},{"type":"codeVoice","code":"1"},{"type":"text","text":"."}]},{"type":"paragraph","inlineContent":[{"type":"text","text":"For a more complex example, consider the following bare-bones search feature that uses a"},{"type":"text","text":" "},{"type":"text","text":"scheduler and cancel token to debounce requests:"}]},{"type":"codeListing","syntax":"swift","code":["struct Search: ReducerProtocol {","  struct State: Equatable {","    var query = \"\"","    var results: [String] = []","  }","","  enum Action: Equatable {","    case queryChanged(String)","    case response([String])","  }","","  @Dependency(\\.apiClient) var apiClient","  @Dependency(\\.mainQueue) var mainQueue","","  func reduce(","    into state: inout State, action: Action","  ) -> Effect<Action, Never> {","    switch action {","    case let .queryChanged(query):","      enum SearchID {}","","      state.query = query","      return .run { send in","        try await self.mainQueue.sleep(for: 0.5)","","        guard let results = try? await self.apiClient.search(query)","        else { return }","","        await send(.response(results))","      }","      .cancellable(id: SearchID.self, cancelInFlight: true)","","    case let .response(results):","      state.results = results","      return .none","    }","  }","}"]},{"type":"paragraph","inlineContent":[{"type":"text","text":"It can be fully tested by overriding the "},{"type":"codeVoice","code":"mainQueue"},{"type":"text","text":" and "},{"type":"codeVoice","code":"apiClient"},{"type":"text","text":" dependencies with values"},{"type":"text","text":" "},{"type":"text","text":"that are fully controlled and deterministic:"}]},{"type":"codeListing","syntax":"swift","code":["let store = TestStore(","  initialState: Search.State(),","  reducer: Search",")","","\/\/ Create a test dispatch scheduler to control the timing of effects","let mainQueue = DispatchQueue.test","store.dependencies.mainQueue = mainQueue.eraseToAnyScheduler()","","\/\/ Simulate a search response with one item","store.dependencies.mainQueue.apiClient.search = { _ in","  [\"Composable Architecture\"]","}","","\/\/ Change the query","await store.send(.searchFieldChanged(\"c\") {","  \/\/ Assert that state updates accordingly","  $0.query = \"c\"","}","","\/\/ Advance the queue by a period shorter than the debounce","await mainQueue.advance(by: 0.25)","","\/\/ Change the query again","await store.send(.searchFieldChanged(\"co\") {","  $0.query = \"co\"","}","","\/\/ Advance the queue by a period shorter than the debounce","await mainQueue.advance(by: 0.25)","\/\/ Advance the scheduler to the debounce","await scheduler.advance(by: 0.25)","","\/\/ Assert that the expected response is received","await store.receive(.response([\"Composable Architecture\"])) {","  \/\/ Assert that state updates accordingly","  $0.results = [\"Composable Architecture\"]","}"]},{"type":"paragraph","inlineContent":[{"type":"text","text":"This test is proving that the debounced network requests are correctly canceled when we do not"},{"type":"text","text":" "},{"type":"text","text":"wait longer than the 0.5 seconds, because if it wasnâ€™t and it delivered an action when we did"},{"type":"text","text":" "},{"type":"text","text":"not expect it would cause a test failure."}]}]}],"variants":[{"paths":["\/documentation\/composablearchitecture\/teststore"],"traits":[{"interfaceLanguage":"swift"}]}],"identifier":{"url":"doc:\/\/co.pointfree.ComposableArchitecture\/documentation\/ComposableArchitecture\/TestStore","interfaceLanguage":"swift"},"abstract":[{"type":"text","text":"A testable runtime for a reducer."}],"kind":"symbol","metadata":{"fragments":[{"kind":"keyword","text":"class"},{"kind":"text","text":" "},{"kind":"identifier","text":"TestStore"}],"title":"TestStore","roleHeading":"Class","role":"symbol","symbolKind":"class","externalID":"s:22ComposableArchitecture9TestStoreC","modules":[{"name":"ComposableArchitecture"}],"navigatorTitle":[{"kind":"identifier","text":"TestStore"}]},"hierarchy":{"paths":[["doc:\/\/co.pointfree.ComposableArchitecture\/documentation\/ComposableArchitecture"]]},"topicSections":[{"title":"Creating a test store","identifiers":["doc:\/\/co.pointfree.ComposableArchitecture\/documentation\/ComposableArchitecture\/TestStore\/init(initialState:reducer:file:line:)"]},{"title":"Configuring a test store","identifiers":["doc:\/\/co.pointfree.ComposableArchitecture\/documentation\/ComposableArchitecture\/TestStore\/dependencies","doc:\/\/co.pointfree.ComposableArchitecture\/documentation\/ComposableArchitecture\/TestStore\/timeout"]},{"title":"Testing a reducer","identifiers":["doc:\/\/co.pointfree.ComposableArchitecture\/documentation\/ComposableArchitecture\/TestStore\/send(_:_:file:line:)-3pf4p","doc:\/\/co.pointfree.ComposableArchitecture\/documentation\/ComposableArchitecture\/TestStoreTask"]},{"title":"Accessing state","abstract":[{"type":"text","text":"While the most common way of interacting with a test storeâ€™s state is via its "},{"type":"reference","isActive":true,"identifier":"doc:\/\/co.pointfree.ComposableArchitecture\/documentation\/ComposableArchitecture\/TestStore\/send(_:_:file:line:)-3pf4p"},{"type":"text","text":" and "},{"type":"codeVoice","code":"receive(_:timeout:_:file:line:)-1fjua"},{"type":"text","text":" methods, you may also access it directly throughout a test."}],"identifiers":["doc:\/\/co.pointfree.ComposableArchitecture\/documentation\/ComposableArchitecture\/TestStore\/state"]},{"title":"Scoping test stores","identifiers":["doc:\/\/co.pointfree.ComposableArchitecture\/documentation\/ComposableArchitecture\/TestStore\/scope(state:action:)","doc:\/\/co.pointfree.ComposableArchitecture\/documentation\/ComposableArchitecture\/TestStore\/scope(state:)"]},{"title":"Deprecations","identifiers":["doc:\/\/co.pointfree.ComposableArchitecture\/documentation\/ComposableArchitecture\/TestStoreDeprecations"]},{"title":"Instance Methods","identifiers":["doc:\/\/co.pointfree.ComposableArchitecture\/documentation\/ComposableArchitecture\/TestStore\/finish(timeout:file:line:)","doc:\/\/co.pointfree.ComposableArchitecture\/documentation\/ComposableArchitecture\/TestStore\/receive(_:timeout:_:file:line:)"]},{"title":"Type Aliases","identifiers":["doc:\/\/co.pointfree.ComposableArchitecture\/documentation\/ComposableArchitecture\/TestStore\/LocalAction","doc:\/\/co.pointfree.ComposableArchitecture\/documentation\/ComposableArchitecture\/TestStore\/LocalState"]}],"references":{"doc://co.pointfree.ComposableArchitecture/documentation/ComposableArchitecture":{"role":"collection","title":"ComposableArchitecture","abstract":[{"type":"text","text":"The Composable Architecture (TCA, for short) is a library for building applications in a consistent"},{"type":"text","text":" "},{"type":"text","text":"and understandable way, with composition, testing, and ergonomics in mind. It can be used in"},{"type":"text","text":" "},{"type":"text","text":"SwiftUI, UIKit, and more, and on any Apple platform (iOS, macOS, tvOS, and watchOS)."}],"identifier":"doc:\/\/co.pointfree.ComposableArchitecture\/documentation\/ComposableArchitecture","kind":"symbol","type":"topic","url":"\/documentation\/composablearchitecture"},"doc://co.pointfree.ComposableArchitecture/documentation/ComposableArchitecture/TestStoreTask":{"role":"symbol","title":"TestStoreTask","fragments":[{"kind":"keyword","text":"struct"},{"kind":"text","text":" "},{"kind":"identifier","text":"TestStoreTask"}],"abstract":[{"type":"text","text":"The type returned from "},{"type":"reference","isActive":true,"identifier":"doc:\/\/co.pointfree.ComposableArchitecture\/documentation\/ComposableArchitecture\/TestStore\/send(_:_:file:line:)-3pf4p"},{"type":"text","text":" that represents the lifecycle"},{"type":"text","text":" "},{"type":"text","text":"of the effect started from sending an action."}],"identifier":"doc:\/\/co.pointfree.ComposableArchitecture\/documentation\/ComposableArchitecture\/TestStoreTask","kind":"symbol","type":"topic","navigatorTitle":[{"kind":"identifier","text":"TestStoreTask"}],"url":"\/documentation\/composablearchitecture\/teststoretask"},"doc://co.pointfree.ComposableArchitecture/documentation/ComposableArchitecture/ReducerProtocol":{"role":"symbol","title":"ReducerProtocol","fragments":[{"kind":"keyword","text":"protocol"},{"kind":"text","text":" "},{"kind":"identifier","text":"ReducerProtocol"}],"abstract":[{"type":"text","text":"A protocol that describes how to evolve the current state of an application to the next state,"},{"type":"text","text":" "},{"type":"text","text":"given an action, and describes what "},{"type":"reference","isActive":true,"identifier":"doc:\/\/co.pointfree.ComposableArchitecture\/documentation\/ComposableArchitecture\/Effect"},{"type":"text","text":"s should be executed later by the store, if any."}],"identifier":"doc:\/\/co.pointfree.ComposableArchitecture\/documentation\/ComposableArchitecture\/ReducerProtocol","kind":"symbol","type":"topic","navigatorTitle":[{"kind":"identifier","text":"ReducerProtocol"}],"url":"\/documentation\/composablearchitecture\/reducerprotocol"},"doc://co.pointfree.ComposableArchitecture/documentation/ComposableArchitecture/TestStore/dependencies":{"role":"symbol","title":"dependencies","fragments":[{"kind":"keyword","text":"var"},{"kind":"text","text":" "},{"kind":"identifier","text":"dependencies"},{"kind":"text","text":": "},{"kind":"typeIdentifier","text":"DependencyValues","preciseIdentifier":"s:12Dependencies16DependencyValuesV"}],"abstract":[{"type":"text","text":"The current dependencies."}],"identifier":"doc:\/\/co.pointfree.ComposableArchitecture\/documentation\/ComposableArchitecture\/TestStore\/dependencies","kind":"symbol","type":"topic","url":"\/documentation\/composablearchitecture\/teststore\/dependencies"},"doc://co.pointfree.ComposableArchitecture/documentation/ComposableArchitecture/TestStoreDeprecations":{"role":"collectionGroup","title":"Deprecations","abstract":[{"type":"text","text":"Review unsupported test store APIs and their replacements."}],"identifier":"doc:\/\/co.pointfree.ComposableArchitecture\/documentation\/ComposableArchitecture\/TestStoreDeprecations","kind":"article","type":"topic","url":"\/documentation\/composablearchitecture\/teststoredeprecations"},"doc://co.pointfree.ComposableArchitecture/documentation/ComposableArchitecture/TestStore":{"role":"symbol","title":"TestStore","fragments":[{"kind":"keyword","text":"class"},{"kind":"text","text":" "},{"kind":"identifier","text":"TestStore"}],"abstract":[{"type":"text","text":"A testable runtime for a reducer."}],"identifier":"doc:\/\/co.pointfree.ComposableArchitecture\/documentation\/ComposableArchitecture\/TestStore","kind":"symbol","type":"topic","navigatorTitle":[{"kind":"identifier","text":"TestStore"}],"url":"\/documentation\/composablearchitecture\/teststore"},"doc://co.pointfree.ComposableArchitecture/documentation/ComposableArchitecture/TestStore/init(initialState:reducer:file:line:)":{"role":"symbol","title":"init(initialState:reducer:file:line:)","fragments":[{"kind":"identifier","text":"init"},{"kind":"text","text":"("},{"kind":"externalParam","text":"initialState"},{"kind":"text","text":": "},{"kind":"typeIdentifier","text":"Reducer","preciseIdentifier":"s:22ComposableArchitecture9TestStoreC7Reducerxmfp"},{"kind":"text","text":"."},{"kind":"typeIdentifier","text":"State","preciseIdentifier":"s:22ComposableArchitecture15ReducerProtocolP5StateQa"},{"kind":"text","text":", "},{"kind":"externalParam","text":"reducer"},{"kind":"text","text":": "},{"kind":"typeIdentifier","text":"Reducer","preciseIdentifier":"s:22ComposableArchitecture9TestStoreC7Reducerxmfp"},{"kind":"text","text":", "},{"kind":"externalParam","text":"file"},{"kind":"text","text":": "},{"kind":"typeIdentifier","text":"StaticString","preciseIdentifier":"s:s12StaticStringV"},{"kind":"text","text":", "},{"kind":"externalParam","text":"line"},{"kind":"text","text":": "},{"kind":"typeIdentifier","text":"UInt","preciseIdentifier":"s:Su"},{"kind":"text","text":")"}],"abstract":[],"identifier":"doc:\/\/co.pointfree.ComposableArchitecture\/documentation\/ComposableArchitecture\/TestStore\/init(initialState:reducer:file:line:)","kind":"symbol","type":"topic","url":"\/documentation\/composablearchitecture\/teststore\/init(initialstate:reducer:file:line:)"},"doc://co.pointfree.ComposableArchitecture/documentation/ComposableArchitecture/TestStore/send(_:_:file:line:)-3pf4p":{"role":"symbol","title":"send(_:_:file:line:)","fragments":[{"kind":"keyword","text":"func"},{"kind":"text","text":" "},{"kind":"identifier","text":"send"},{"kind":"text","text":"("},{"kind":"typeIdentifier","text":"ScopedAction","preciseIdentifier":"s:22ComposableArchitecture9TestStoreCAASQR_rlE12ScopedActionq0_mfp"},{"kind":"text","text":", (("},{"kind":"keyword","text":"inout"},{"kind":"text","text":" "},{"kind":"typeIdentifier","text":"ScopedState","preciseIdentifier":"s:22ComposableArchitecture9TestStoreCAASQR_rlE11ScopedStateq_mfp"},{"kind":"text","text":") "},{"kind":"keyword","text":"throws"},{"kind":"text","text":" -> "},{"kind":"typeIdentifier","text":"Void","preciseIdentifier":"s:s4Voida"},{"kind":"text","text":")?, "},{"kind":"externalParam","text":"file"},{"kind":"text","text":": "},{"kind":"typeIdentifier","text":"StaticString","preciseIdentifier":"s:s12StaticStringV"},{"kind":"text","text":", "},{"kind":"externalParam","text":"line"},{"kind":"text","text":": "},{"kind":"typeIdentifier","text":"UInt","preciseIdentifier":"s:Su"},{"kind":"text","text":") "},{"kind":"keyword","text":"async"},{"kind":"text","text":" -> "},{"kind":"typeIdentifier","text":"TestStoreTask","preciseIdentifier":"s:22ComposableArchitecture13TestStoreTaskV"}],"abstract":[{"type":"text","text":"Sends an action to the store and asserts when state changes."}],"identifier":"doc:\/\/co.pointfree.ComposableArchitecture\/documentation\/ComposableArchitecture\/TestStore\/send(_:_:file:line:)-3pf4p","kind":"symbol","type":"topic","url":"\/documentation\/composablearchitecture\/teststore\/send(_:_:file:line:)-3pf4p"},"doc://co.pointfree.ComposableArchitecture/documentation/ComposableArchitecture/TestStore/state":{"role":"symbol","title":"state","fragments":[{"kind":"keyword","text":"var"},{"kind":"text","text":" "},{"kind":"identifier","text":"state"},{"kind":"text","text":": "},{"kind":"typeIdentifier","text":"Reducer","preciseIdentifier":"s:22ComposableArchitecture9TestStoreC7Reducerxmfp"},{"kind":"text","text":"."},{"kind":"typeIdentifier","text":"State","preciseIdentifier":"s:22ComposableArchitecture15ReducerProtocolP5StateQa"}],"abstract":[{"type":"text","text":"The current state."}],"identifier":"doc:\/\/co.pointfree.ComposableArchitecture\/documentation\/ComposableArchitecture\/TestStore\/state","kind":"symbol","type":"topic","url":"\/documentation\/composablearchitecture\/teststore\/state"},"doc://co.pointfree.ComposableArchitecture/documentation/ComposableArchitecture/Effect":{"role":"symbol","title":"Effect","fragments":[{"kind":"keyword","text":"struct"},{"kind":"text","text":" "},{"kind":"identifier","text":"Effect"}],"abstract":[{"type":"text","text":"The "},{"type":"reference","isActive":true,"identifier":"doc:\/\/co.pointfree.ComposableArchitecture\/documentation\/ComposableArchitecture\/Effect"},{"type":"text","text":" type encapsulates a unit of work that can be run in the outside world, and can"},{"type":"text","text":" "},{"type":"text","text":"feed actions back to the "},{"type":"reference","isActive":true,"identifier":"doc:\/\/co.pointfree.ComposableArchitecture\/documentation\/ComposableArchitecture\/Store"},{"type":"text","text":". It is the perfect place to do side effects, such as network"},{"type":"text","text":" "},{"type":"text","text":"requests, saving\/loading from disk, creating timers, interacting with dependencies, and more."}],"identifier":"doc:\/\/co.pointfree.ComposableArchitecture\/documentation\/ComposableArchitecture\/Effect","kind":"symbol","type":"topic","navigatorTitle":[{"kind":"identifier","text":"Effect"}],"url":"\/documentation\/composablearchitecture\/effect"},"doc://co.pointfree.ComposableArchitecture/documentation/ComposableArchitecture/TestStore/timeout":{"role":"symbol","title":"timeout","fragments":[{"kind":"keyword","text":"var"},{"kind":"text","text":" "},{"kind":"identifier","text":"timeout"},{"kind":"text","text":": "},{"kind":"typeIdentifier","text":"UInt64","preciseIdentifier":"s:s6UInt64V"}],"abstract":[{"type":"text","text":"The timeout to await for in-flight effects."}],"identifier":"doc:\/\/co.pointfree.ComposableArchitecture\/documentation\/ComposableArchitecture\/TestStore\/timeout","kind":"symbol","type":"topic","url":"\/documentation\/composablearchitecture\/teststore\/timeout"},"doc://co.pointfree.ComposableArchitecture/documentation/ComposableArchitecture/TestStore/finish(timeout:file:line:)":{"role":"symbol","title":"finish(timeout:file:line:)","fragments":[{"kind":"keyword","text":"func"},{"kind":"text","text":" "},{"kind":"identifier","text":"finish"},{"kind":"text","text":"("},{"kind":"externalParam","text":"timeout"},{"kind":"text","text":": "},{"kind":"typeIdentifier","text":"UInt64","preciseIdentifier":"s:s6UInt64V"},{"kind":"text","text":"?, "},{"kind":"externalParam","text":"file"},{"kind":"text","text":": "},{"kind":"typeIdentifier","text":"StaticString","preciseIdentifier":"s:s12StaticStringV"},{"kind":"text","text":", "},{"kind":"externalParam","text":"line"},{"kind":"text","text":": "},{"kind":"typeIdentifier","text":"UInt","preciseIdentifier":"s:Su"},{"kind":"text","text":") "},{"kind":"keyword","text":"async"}],"abstract":[{"type":"text","text":"Suspends until all in-flight effects have finished, or until it times out."}],"identifier":"doc:\/\/co.pointfree.ComposableArchitecture\/documentation\/ComposableArchitecture\/TestStore\/finish(timeout:file:line:)","kind":"symbol","type":"topic","url":"\/documentation\/composablearchitecture\/teststore\/finish(timeout:file:line:)"},"doc://co.pointfree.ComposableArchitecture/documentation/ComposableArchitecture/ActorIsolated":{"role":"symbol","title":"ActorIsolated","fragments":[{"kind":"keyword","text":"class"},{"kind":"text","text":" "},{"kind":"identifier","text":"ActorIsolated"}],"abstract":[{"type":"text","text":"A generic wrapper for isolating a mutable value to an actor."}],"identifier":"doc:\/\/co.pointfree.ComposableArchitecture\/documentation\/ComposableArchitecture\/ActorIsolated","kind":"symbol","type":"topic","navigatorTitle":[{"kind":"identifier","text":"ActorIsolated"}],"url":"\/documentation\/composablearchitecture\/actorisolated"},"doc://co.pointfree.ComposableArchitecture/documentation/ComposableArchitecture/TestStore/LocalAction":{"deprecated":true,"conformance":{"constraints":[{"type":"codeVoice","code":"Reducer"},{"type":"text","text":" conforms to "},{"type":"codeVoice","code":"ReducerProtocol"},{"type":"text","text":"."}],"availabilityPrefix":[{"type":"text","text":"Available when"}],"conformancePrefix":[{"type":"text","text":"Conforms when"}]},"role":"symbol","title":"TestStore.LocalAction","fragments":[{"kind":"keyword","text":"typealias"},{"kind":"text","text":" "},{"kind":"identifier","text":"LocalAction"}],"abstract":[],"identifier":"doc:\/\/co.pointfree.ComposableArchitecture\/documentation\/ComposableArchitecture\/TestStore\/LocalAction","kind":"symbol","type":"topic","navigatorTitle":[{"kind":"identifier","text":"LocalAction"}],"url":"\/documentation\/composablearchitecture\/teststore\/localaction"},"doc://co.pointfree.ComposableArchitecture/documentation/ComposableArchitecture/TestStore/scope(state:action:)":{"conformance":{"constraints":[{"type":"codeVoice","code":"Reducer"},{"type":"text","text":" conforms to "},{"type":"codeVoice","code":"ReducerProtocol"},{"type":"text","text":"."}],"availabilityPrefix":[{"type":"text","text":"Available when"}],"conformancePrefix":[{"type":"text","text":"Conforms when"}]},"role":"symbol","title":"scope(state:action:)","fragments":[{"kind":"keyword","text":"func"},{"kind":"text","text":" "},{"kind":"identifier","text":"scope"},{"kind":"text","text":"<"},{"kind":"genericParameter","text":"S"},{"kind":"text","text":", "},{"kind":"genericParameter","text":"A"},{"kind":"text","text":">("},{"kind":"externalParam","text":"state"},{"kind":"text","text":": ("},{"kind":"typeIdentifier","text":"ScopedState","preciseIdentifier":"s:22ComposableArchitecture9TestStoreC11ScopedStateq_mfp"},{"kind":"text","text":") -> "},{"kind":"typeIdentifier","text":"S","preciseIdentifier":"s:22ComposableArchitecture9TestStoreC5scope5state6actionACyxqd__qd_0_q1_Gqd__q_c_q0_qd_0_ctr0_lF1SL_qd__mfp"},{"kind":"text","text":", "},{"kind":"externalParam","text":"action"},{"kind":"text","text":": ("},{"kind":"typeIdentifier","text":"A","preciseIdentifier":"s:22ComposableArchitecture9TestStoreC5scope5state6actionACyxqd__qd_0_q1_Gqd__q_c_q0_qd_0_ctr0_lF1AL_qd_0_mfp"},{"kind":"text","text":") -> "},{"kind":"typeIdentifier","text":"ScopedAction","preciseIdentifier":"s:22ComposableArchitecture9TestStoreC12ScopedActionq0_mfp"},{"kind":"text","text":") -> "},{"kind":"typeIdentifier","text":"TestStore","preciseIdentifier":"s:22ComposableArchitecture9TestStoreC"},{"kind":"text","text":"<"},{"kind":"typeIdentifier","text":"Reducer","preciseIdentifier":"s:22ComposableArchitecture9TestStoreC7Reducerxmfp"},{"kind":"text","text":", "},{"kind":"typeIdentifier","text":"S","preciseIdentifier":"s:22ComposableArchitecture9TestStoreC5scope5state6actionACyxqd__qd_0_q1_Gqd__q_c_q0_qd_0_ctr0_lF1SL_qd__mfp"},{"kind":"text","text":", "},{"kind":"typeIdentifier","text":"A","preciseIdentifier":"s:22ComposableArchitecture9TestStoreC5scope5state6actionACyxqd__qd_0_q1_Gqd__q_c_q0_qd_0_ctr0_lF1AL_qd_0_mfp"},{"kind":"text","text":", "},{"kind":"typeIdentifier","text":"Context","preciseIdentifier":"s:22ComposableArchitecture9TestStoreC7Contextq1_mfp"},{"kind":"text","text":">"}],"abstract":[{"type":"text","text":"Scopes a store to assert against scoped state and actions."}],"identifier":"doc:\/\/co.pointfree.ComposableArchitecture\/documentation\/ComposableArchitecture\/TestStore\/scope(state:action:)","kind":"symbol","type":"topic","url":"\/documentation\/composablearchitecture\/teststore\/scope(state:action:)"},"doc://co.pointfree.ComposableArchitecture/documentation/ComposableArchitecture/TestStore/LocalState":{"deprecated":true,"conformance":{"constraints":[{"type":"codeVoice","code":"Reducer"},{"type":"text","text":" conforms to "},{"type":"codeVoice","code":"ReducerProtocol"},{"type":"text","text":"."}],"availabilityPrefix":[{"type":"text","text":"Available when"}],"conformancePrefix":[{"type":"text","text":"Conforms when"}]},"role":"symbol","title":"TestStore.LocalState","fragments":[{"kind":"keyword","text":"typealias"},{"kind":"text","text":" "},{"kind":"identifier","text":"LocalState"}],"abstract":[],"identifier":"doc:\/\/co.pointfree.ComposableArchitecture\/documentation\/ComposableArchitecture\/TestStore\/LocalState","kind":"symbol","type":"topic","navigatorTitle":[{"kind":"identifier","text":"LocalState"}],"url":"\/documentation\/composablearchitecture\/teststore\/localstate"},"doc://co.pointfree.ComposableArchitecture/documentation/ComposableArchitecture/TestStore/receive(_:timeout:_:file:line:)":{"conformance":{"constraints":[{"type":"codeVoice","code":"Reducer"},{"type":"text","text":" conforms to "},{"type":"codeVoice","code":"ReducerProtocol"},{"type":"text","text":", "},{"type":"codeVoice","code":"ScopedState"},{"type":"text","text":" conforms to "},{"type":"codeVoice","code":"Equatable"},{"type":"text","text":", and "},{"type":"codeVoice","code":"Reducer.Action"},{"type":"text","text":" conforms to "},{"type":"codeVoice","code":"Equatable"},{"type":"text","text":"."}],"availabilityPrefix":[{"type":"text","text":"Available when"}],"conformancePrefix":[{"type":"text","text":"Conforms when"}]},"role":"symbol","title":"receive(_:timeout:_:file:line:)","fragments":[{"kind":"keyword","text":"func"},{"kind":"text","text":" "},{"kind":"identifier","text":"receive"},{"kind":"text","text":"("},{"kind":"typeIdentifier","text":"Reducer","preciseIdentifier":"s:22ComposableArchitecture9TestStoreCAASQR_SQ6ActionRpzrlE7Reducerxmfp"},{"kind":"text","text":"."},{"kind":"typeIdentifier","text":"Action","preciseIdentifier":"s:22ComposableArchitecture15ReducerProtocolP6ActionQa"},{"kind":"text","text":", "},{"kind":"externalParam","text":"timeout"},{"kind":"text","text":": "},{"kind":"typeIdentifier","text":"UInt64","preciseIdentifier":"s:s6UInt64V"},{"kind":"text","text":"?, (("},{"kind":"keyword","text":"inout"},{"kind":"text","text":" "},{"kind":"typeIdentifier","text":"ScopedState","preciseIdentifier":"s:22ComposableArchitecture9TestStoreCAASQR_SQ6ActionRpzrlE11ScopedStateq_mfp"},{"kind":"text","text":") "},{"kind":"keyword","text":"throws"},{"kind":"text","text":" -> "},{"kind":"typeIdentifier","text":"Void","preciseIdentifier":"s:s4Voida"},{"kind":"text","text":")?, "},{"kind":"externalParam","text":"file"},{"kind":"text","text":": "},{"kind":"typeIdentifier","text":"StaticString","preciseIdentifier":"s:s12StaticStringV"},{"kind":"text","text":", "},{"kind":"externalParam","text":"line"},{"kind":"text","text":": "},{"kind":"typeIdentifier","text":"UInt","preciseIdentifier":"s:Su"},{"kind":"text","text":") "},{"kind":"keyword","text":"async"}],"abstract":[{"type":"text","text":"Asserts an action was received from an effect and asserts how the state changes."}],"identifier":"doc:\/\/co.pointfree.ComposableArchitecture\/documentation\/ComposableArchitecture\/TestStore\/receive(_:timeout:_:file:line:)","kind":"symbol","type":"topic","url":"\/documentation\/composablearchitecture\/teststore\/receive(_:timeout:_:file:line:)"},"doc://co.pointfree.ComposableArchitecture/documentation/ComposableArchitecture/TestStore/scope(state:)":{"conformance":{"constraints":[{"type":"codeVoice","code":"Reducer"},{"type":"text","text":" conforms to "},{"type":"codeVoice","code":"ReducerProtocol"},{"type":"text","text":"."}],"availabilityPrefix":[{"type":"text","text":"Available when"}],"conformancePrefix":[{"type":"text","text":"Conforms when"}]},"role":"symbol","title":"scope(state:)","fragments":[{"kind":"keyword","text":"func"},{"kind":"text","text":" "},{"kind":"identifier","text":"scope"},{"kind":"text","text":"<"},{"kind":"genericParameter","text":"S"},{"kind":"text","text":">("},{"kind":"externalParam","text":"state"},{"kind":"text","text":": ("},{"kind":"typeIdentifier","text":"ScopedState","preciseIdentifier":"s:22ComposableArchitecture9TestStoreC11ScopedStateq_mfp"},{"kind":"text","text":") -> "},{"kind":"typeIdentifier","text":"S","preciseIdentifier":"s:22ComposableArchitecture9TestStoreC5scope5stateACyxqd__q0_q1_Gqd__q_c_tlF1SL_qd__mfp"},{"kind":"text","text":") -> "},{"kind":"typeIdentifier","text":"TestStore","preciseIdentifier":"s:22ComposableArchitecture9TestStoreC"},{"kind":"text","text":"<"},{"kind":"typeIdentifier","text":"Reducer","preciseIdentifier":"s:22ComposableArchitecture9TestStoreC7Reducerxmfp"},{"kind":"text","text":", "},{"kind":"typeIdentifier","text":"S","preciseIdentifier":"s:22ComposableArchitecture9TestStoreC5scope5stateACyxqd__q0_q1_Gqd__q_c_tlF1SL_qd__mfp"},{"kind":"text","text":", "},{"kind":"typeIdentifier","text":"ScopedAction","preciseIdentifier":"s:22ComposableArchitecture9TestStoreC12ScopedActionq0_mfp"},{"kind":"text","text":", "},{"kind":"typeIdentifier","text":"Context","preciseIdentifier":"s:22ComposableArchitecture9TestStoreC7Contextq1_mfp"},{"kind":"text","text":">"}],"abstract":[{"type":"text","text":"Scopes a store to assert against scoped state."}],"identifier":"doc:\/\/co.pointfree.ComposableArchitecture\/documentation\/ComposableArchitecture\/TestStore\/scope(state:)","kind":"symbol","type":"topic","url":"\/documentation\/composablearchitecture\/teststore\/scope(state:)"}}}